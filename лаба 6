"""
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания.
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
2 часть – усложнить написанную программу,
введя по своему усмотрению в условие минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов)
и целевую функцию для нахождения оптимального  решения.

Вариант 4. IT-предприятие набирает сотрудников: 2 тимлида, 2 проджек-менеджера, 3 синьера, 3 мидла, 4 юниора.
Сформировать все возможные варианты заполнения вакантных мест, если имеются 16 претендентов.
"""

import itertools
import timeit
import math
# Определяем количество кандидатов и позиций
candidates = list(range(1, 17))
positions = {'timlid': 2, 'proj_manager': 2, 'senior': 3, 'mid': 3, 'junior': 4}

# Алгоритмический метод
def generate_teams_alg(candidates, positions, current_team=[]):
    if sum(positions.values()) == 0:
        yield current_team
    else:
        for position, count in positions.items():
            if count > 0:
                new_positions = positions.copy()
                new_positions[position] -= 1
                for candidate in candidates:
                    if candidate not in current_team:
                        yield from generate_teams_alg(candidates, new_positions, current_team + [candidate])
# Функция для подсчета общего количества возможных команд
def calculate_total_vacancies(positions):
    total_candidates = math.factorial(len(candidates))
    for count in positions.values():
        total_candidates //= math.factorial(count)
    return total_candidates
# Метод с использованием функций Python
def generate_teams_func(candidates, positions):
    position_list = sum([[pos] * count for pos, count in positions.items()], [])
    for team in itertools.permutations(candidates, len(position_list)):
        yield [candidate for _, candidate in zip(position_list, team)]

# Усложненная часть - добавляем ограничение
def generate_teams_with_limitation(candidates, positions):
    for team in generate_teams_alg(candidates, positions):
        if team[0] < team[1]:  # Предположим, что первый тимлид более опытен
            yield team
total_teams = calculate_total_vacancies(positions)
print(f"Общее количество возможных команд: {total_teams}")
# Функция для измерения времени и вывода результатов
def measure_and_print_optimal_teams(candidates, positions):
    print(f"Вакансии: {positions}")

    # Измеряем время алгоритмического метода
    start_time_alg = timeit.default_timer()
    alg_teams = list(itertools.islice(generate_teams_with_limitation(candidates, positions), 100))
    alg_time = timeit.default_timer() - start_time_alg
    print(f"Алгоритмический метод 100 вариантов занял: {alg_time:.4f} секунд")
    for i, team in enumerate(alg_teams, 1):
        print(f"Команда {i} (алгоритм): {team}")

    # Измеряем время функционального метода
    start_time_func = timeit.default_timer()
    func_teams = list(itertools.islice(generate_teams_func(candidates, positions), 100))
    func_time = timeit.default_timer() - start_time_func
    print(f"Функциональный метод 100 вариантов занял: {func_time:.4f} секунд")
    for i, team in enumerate(func_teams, 1):
        print(f"Команда {i} (функция): {team}")

# Выводим результаты
measure_and_print_optimal_teams(candidates, positions)

