import tkinter as tk
from tkinter import filedialog, messagebox, colorchooser

# Класс для представления прямоугольника
class Rectangle:
    def __init__(self, canvas, x1, y1, x2, y2, color="black"):
        self.canvas = canvas
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.color = color
        self.rectangle = self.canvas.create_rectangle(self.x1, self.y1, self.x2, self.y2, outline=self.color, fill=self.color)

        # Привязка события нажатия для смены цвета
        self.canvas.tag_bind(self.rectangle, '<Button-1>', self.start_move)
        self.canvas.tag_bind(self.rectangle, '<Button-3>', self.change_color)

        # Привязка событий для перемещения прямоугольника
        self.canvas.tag_bind(self.rectangle, '<B1-Motion>', self.move)
        self.start_x = 0
        self.start_y = 0

    # Метод для изменения цвета через color dialog
    def change_color(self, event):
        color = colorchooser.askcolor(title="Выберите цвет")[1]
        if color:
            self.color = color
            self.canvas.itemconfig(self.rectangle, fill=self.color, outline=self.color)


    # Метод для перемещения прямоугольника мышью
    def move(self, event):
        dx = event.x - self.start_x
        dy = event.y - self.start_y
        self.canvas.move(self.rectangle, dx, dy)
        self.x1 += dx
        self.y1 += dy
        self.x2 += dx
        self.y2 += dy
        self.start_x = event.x
        self.start_y = event.y

    # Метод для начала перемещения (запоминаем координаты нажатия)
    def start_move(self, event):
        self.start_x = event.x
        self.start_y = event.y

    # Метод для проверки пересечения с другим прямоугольником
    def intersects(self, other):
        return not (self.x2 < other.x1 or self.x1 > other.x2 or self.y2 < other.y1 or self.y1 > other.y2)

# Основное приложение
class RectangleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Прямоугольники")

        # Создаем Canvas для рисования
        self.canvas = tk.Canvas(root, width=500, height=500)
        self.canvas.pack()

        # Создаем список прямоугольников
        self.rectangles = []

        # Кнопки для управления
        file_button = tk.Button(root, text="Загрузить файл", command=self.load_file)
        file_button.pack(side=tk.LEFT)

        check_button = tk.Button(root, text="Проверить пересечение", command=self.check_intersections)
        check_button.pack(side=tk.LEFT)

    # Метод для загрузки данных из файла
    def load_file(self):
        # Открываем диалоговое окно для выбора файла
        filename = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if filename:
            self.load_rectangles_from_file(filename)

    # Метод для загрузки прямоугольников из файла
    def load_rectangles_from_file(self, filename):
        try:
            with open(filename, "r") as f:
                for line in f:
                    x1, y1, x2, y2, color = line.strip().split(',')
                    rect = Rectangle(self.canvas, int(x1), int(y1), int(x2), int(y2), color)
                    self.rectangles.append(rect)
        except Exception as e:
            messagebox.showerror("Ошибка", f"Ошибка при чтении файла: {e}")

    # Метод для проверки пересечения
    def check_intersections(self):
        for i, rect1 in enumerate(self.rectangles):
            for rect2 in self.rectangles[i+1:]:
                if rect1.intersects(rect2):
                    messagebox.showinfo("Пересечение", "Прямоугольники пересекаются")
                    return
        messagebox.showinfo("Пересечение", "Прямоугольники не пересекаются")

# Запуск приложения
if __name__ == "__main__":
    root = tk.Tk()
    app = RectangleApp(root)
    root.mainloop()
